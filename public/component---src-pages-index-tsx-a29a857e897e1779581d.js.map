{"version":3,"sources":["webpack:///./src/utils/ida-error.util.ts","webpack:///./src/utils/localStorage.util.ts","webpack:///./src/controllers/user.controller.ts","webpack:///./src/utils/validations.ts","webpack:///./src/components/user-card/components/avatar/avatar.style.ts","webpack:///./src/components/user-card/components/avatar/avatar.tsx","webpack:///./src/components/user-card/user-card.style.ts","webpack:///./src/components/user-card/user-card.tsx","webpack:///./src/pages/index.tsx","webpack:///./src/repositories/user.repository.ts"],"names":["status","types","saveUserOnLocalStorage","ida","token","user","window","localStorage","setItem","localUsers","getItem","parsedLocalUsers","JSON","parse","users","index","findIndex","userFounded","data","splice","push","stringify","signin","a","username","password","setErrors","setLoading","appSource","signinRepository","signinResponse","response","error","console","log","phone","email","stringifiedData","postMessage","basicSignin","verifyTokenRepository","navigate","state","sendResetPasswordEmail","setEmailError","test","requestResetPassword","sendResetPasswordSMS","setValidPhone","inputWithoutChars","replace","isValidPhone","AvatarComponent","styled","img","theme","borderRadius","circular","InitialUsername","div","neutralColor","fontFamily","primary","fontWeight","bold","fontSize","sm","brandColor","darkest","Avatar","uri","src","alt","renderAvatar","renderUsernameInitial","CardWrapper","Card","id","avatarURI","onClick","Header","header","spacingStack","xxs","DescriptionWrapper","UserList","ul","xs","IndexPage","useContext","AppContext","appName","useNavigate","useState","setUsers","useEffect","length","map","title","type","key","renderCards","white","small","axios","post","process","headers","signup","verifyToken","input","sendEmailValidation","sendEmailValidationToken","sendPhoneValidation","sendPhoneValidationCode","code"],"mappings":"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","file":"component---src-pages-index-tsx-a29a857e897e1779581d.js","sourcesContent":["export const status: { [key: string]: string } = {\n  'user/wrong-password': 'Senha incorreta',\n  'user/not-found': 'Usuário não encontrado',\n};\n\nexport const types = {\n  WRONG_PASSWORD: 'user/wrong-password',\n  USER_NOT_FOUND: 'user/not-found',\n};\n","interface UserLocalStorage {\n  ida: string;\n  token: string;\n}\n\ninterface UserParams extends UserLocalStorage {\n  user: {\n    username: string;\n  };\n}\n\nfunction saveUserOnLocalStorage({ ida, token, user }: UserParams): void {\n  window.localStorage.setItem('ida@id', ida);\n  window.localStorage.setItem('ida@token', token);\n\n  const localUsers = window.localStorage.getItem('ida@users') || '{}';\n  const parsedLocalUsers = JSON.parse(localUsers).users || [];\n  const index = parsedLocalUsers.findIndex(\n    (userFounded: UserLocalStorage) => userFounded.ida === ida\n  );\n  const data = { ida, token, user };\n\n  if (index !== -1) {\n    parsedLocalUsers.splice(index, 1, data);\n  } else {\n    parsedLocalUsers.push(data);\n  }\n\n  window.localStorage.setItem(\n    'ida@users',\n    JSON.stringify({ users: parsedLocalUsers })\n  );\n}\n\nexport { saveUserOnLocalStorage };\n\nexport default null;\n","import { navigate } from '@reach/router';\nimport { isEmail, isPhone } from '../utils/validations';\nimport {\n  signin as signinRepository,\n  signup as signupRepository,\n  verifyToken as verifyTokenRepository,\n  requestResetPassword,\n  sendEmailValidation as sendEmailValidationRepository,\n  sendEmailValidationToken as sendEmailValidationTokenRepository,\n  sendPhoneValidation as sendPhoneValidationRepository,\n  sendPhoneValidationCode as sendPhoneValidationCodeRepository,\n} from '../repositories/user.repository';\nimport { status, types } from '../utils/ida-error.util';\nimport { saveUserOnLocalStorage } from '../utils/localStorage.util';\n\ninterface Errors {\n  username?: string;\n  password?: string;\n}\n\ninterface UserLogin {\n  username: string;\n  password: string;\n}\ninterface SigninParams extends UserLogin {\n  appSource: any;\n  setErrors(error: Errors): void;\n  setLoading(status: boolean): void;\n}\n\ninterface UserLocalStorage {\n  ida: string;\n  token: string;\n}\n\n/**\n * function to valdiate and request authentication to the repository\n * @param {object} data user information to validate and authenticate\n * @param {string} data.username user username\n * @param {string} data.password user password\n * @param {string} data.setErrors function to set errors on story\n * @param {string} data.setLoading function to set loading state on story\n * @param {string} data.appSource parent Window object\n */\nexport const signin = async ({\n  username,\n  password,\n  setErrors,\n  setLoading,\n  appSource,\n}: SigninParams): Promise<void> => {\n  setLoading(true);\n  setErrors({});\n  let signinResponse;\n  try {\n    signinResponse = await signinRepository({ username, password });\n  } catch (err) {\n    if (err.response && err.response.data && err.response.data.error) {\n      const { error } = err.response.data;\n      switch (error) {\n        case types.WRONG_PASSWORD:\n          setErrors({ password: status[error] });\n          return;\n        case types.USER_NOT_FOUND:\n          setErrors({ username: status[error] });\n          return;\n        default:\n          return;\n      }\n    }\n\n    setLoading(false);\n    throw err;\n  }\n\n\n  if (signinResponse.data) {\n    console.log(signinResponse);\n    const {\n      ida, token, username, phone, email,\n    } = signinResponse.data;\n    const stringifiedData = JSON.stringify({\n      username,\n      ida,\n      token,\n      phone,\n      email,\n    });\n\n    saveUserOnLocalStorage({ ida, token, user: { username } });\n\n    if (appSource) appSource.postMessage(stringifiedData, '*');\n  }\n\n  setErrors({});\n  setLoading(false);\n};\n\ninterface BaisSigninParams {\n  ida: string;\n  token: string;\n  username: string;\n  appSource: any;\n}\n\n/**\n * function to request token validaiton on IDA api\n * @param {object} data user information to validate and authenticate\n * @param {string} data.token user username\n * @param {string} data.token user token\n * @param {string} data.ida user ida\n * @param {string} data.appSource parent Window object\n */\nexport const basicSignin = async ({\n  username,\n  ida,\n  token,\n  appSource,\n}: BaisSigninParams) => {\n  let response;\n\n  try {\n    response = await verifyTokenRepository(token);\n  } catch (err) {\n    navigate('/signin/auth', { state: { username } });\n    throw err;\n  }\n\n  const { email, phone } = response.data;\n  const stringifiedData = JSON.stringify({\n    ida,\n    token,\n    username,\n    email,\n    phone,\n  });\n\n\n  console.log('has app source?', !!appSource);\n  if (appSource) appSource.postMessage(stringifiedData, '*');\n};\n\ninterface SendResetPasswordEmailParams {\n  email: string;\n  setEmailError(error: string): void;\n}\n\n/**\n * function to send email password reset\n * @param {object} data user information to send email password reset\n * @param {string} data.email email\n *\n */\nexport const sendResetPasswordEmail = async ({\n  email,\n  setEmailError,\n}: SendResetPasswordEmailParams) => {\n  const isValidEmail = isEmail(email);\n  if (!isValidEmail) {\n    setEmailError('Informe um e-mail válido');\n    return;\n  }\n  setEmailError('');\n  try {\n    await requestResetPassword(email);\n  } catch (err) {\n    console.log(err);\n    throw err;\n  }\n  navigate('/forget-password/sent-email', { state: { email } });\n};\n\ninterface SendResetPasswordSMSParams {\n  phone: string;\n  setValidPhone(isValid: boolean): void;\n}\n\nexport const sendResetPasswordSMS = async ({\n  phone,\n  setValidPhone,\n}: SendResetPasswordSMSParams) => {\n  const isValidPhone = isPhone(phone);\n  if (!phone) {\n    setValidPhone(isValidPhone);\n    return;\n  }\n  setValidPhone(isValidPhone);\n  try {\n    await requestResetPassword(phone);\n  } catch (err) {\n    throw err;\n  }\n};\n","export const phoneMask = (input: string) => {\n  let v = input;\n  v = v.replace(/\\D/g, '');\n  v = v.length > 11 ? v.substring(0, 11) : v;\n  v = v.replace(/^(\\d\\d)(\\d)/g, '($1) $2');\n  v = v.replace(/(\\d{5})(\\d)/, '$1-$2');\n  return v;\n};\n\nexport const isPhone = (input: string) => {\n  const inputWithoutChars = input.replace(/\\W/g, '');\n  const inputPhoneFormatted = `+55${inputWithoutChars}`;\n  const regexPhone = /^\\+[0-9]{9,}$/;\n  return regexPhone.test(inputPhoneFormatted);\n};\n\nexport const isEmail = (input: string) => {\n  const regexW3C = /^[a-zA-Z0-9.!#$%&'*+/=?^_`{|}~-]+@[a-zA-Z0-9](?:[a-zA-Z0-9-]{0,61}[a-zA-Z0-9])?(?:\\.[a-zA-Z0-9](?:[a-zA-Z0-9-]{0,61}[a-zA-Z0-9])?)*$/;\n  return regexW3C.test(input);\n};\n\nexport const passwordValidation = (input: string) => {\n  const regex = /^(?=.*[0-9])(?=.*[a-zA-Z])[a-zA-Z0-9]{8,}$/;\n  return regex.test(input);\n};\n","import styled from 'styled-components';\n\nexport const AvatarComponent = styled.img`\n  width: 44px;\n  height: 44px;\n  border-radius: ${({ theme }) => theme.borderRadius.circular};\n  object-fix: cover;\n  user-select: none;\n`;\n\nexport const InitialUsername = styled.div`\n  display: flex;\n  align-items: center;\n  justify-content: center;\n  width: 44px;\n  height: 44px;\n  border-radius: ${({ theme }) => theme.borderRadius.circular};\n  background-color: ${({ theme }) => theme.neutralColor[1]};\n  font-style: ${({ theme }) => theme.fontFamily.primary};\n  font-weight: ${({ theme }) => theme.fontWeight.bold};\n  font-size: ${({ theme }) => theme.fontSize.sm};\n  line-height: 1em;\n  text-transform: uppercase;\n  color: ${({ theme }) => theme.brandColor.primary.darkest};\n`;\n\n","import React from 'react';\nimport { AvatarComponent, InitialUsername } from './avatar.style';\n\n/**\n * Component that contains avatar compoenent\n * @param {string} uri components proptypes\n * @param {string} username user`s username\n */\nconst renderAvatar = (uri: string, username: string) => (\n  <AvatarComponent src={uri} alt={`Essa é a imagem de avatar do ${username}`} />\n);\n\n/**\n * Component that contains avatar compoenent\n * @param {string} username user`s username\n */\nconst renderUsernameInitial = (username: string) => (\n  <InitialUsername>\n    {username[0]}\n    {username[1]}\n  </InitialUsername>\n);\n\ninterface Props {\n  username: string;\n  uri?: string | null;\n}\n\n/**\n * Component that containts default styles for all pages\n * @param {object} props components proptypes\n * @param {string} props.username user`s username\n * @param {uri} props.uri user`s avatar link\n */\nconst Avatar = ({ username, uri }: Props) =>\n  uri ? renderAvatar(uri, username) : renderUsernameInitial(username);\n\nexport default Avatar;\n","import styled from 'styled-components';\n\n/**\n * Component that containts default styles for all pages\n * @param {ReactNode} children component that to will be render inside to Layout\n */\nexport const CardWrapper = styled.div`\n  display: grid;\n  grid-template-columns: 44px 1fr;\n  align-items: center;\n  grid-gap: 16px;\n  cursor: pointer;\n\n  & + & {\n    margin-top: 16px;\n  }\n`;\n","import React from 'react';\nimport { Text } from '@resystem/design-system';\nimport Avatar from './components/avatar/avatar';\nimport { CardWrapper } from './user-card.style';\n\ninterface Props {\n  id: string;\n  token: string;\n  username: string;\n  avatarURI?: string | null;\n  onClick(token: string, id: string, username: string): void;\n} \n\n/**\n * Component that containts default styles for all pages\n * @param {object} props components proptypes\n * @param {string} props.id user id\n * @param {string} props.token user token\n * @param {string} props.username user`s username\n * @param {avatarURI} props.avatarURI user`s avatar link\n */\nconst Card = ({\n  id, token, username, avatarURI, onClick,\n}: Props) => (\n  <CardWrapper\n    onClick={() => onClick(token, id, username)}\n  >\n    <Avatar\n      username={username}\n      uri={avatarURI}\n    />\n    <Text>{username}</Text>\n  </CardWrapper>\n);\n\nexport default Card;\n","import React, { useState, useEffect, useContext } from 'react';\nimport { useNavigate } from \"@reach/router\";\nimport styled from 'styled-components';\nimport { ButtonText, SmallText, Subtitle } from '@resystem/design-system';\nimport Main from '../components/main';\nimport SEO from '../components/seo';\nimport Brand from '../components/brand/brand';\nimport UserCard from '../components/user-card/user-card';\nimport { basicSignin } from '../controllers/user.controller';\nimport { AppContext } from '../store';\n\nconst Header = styled.header`\n  margin-bottom: ${({ theme }) => theme.spacingStack.xxs};\n`;\n\ninterface ThemeInterface {\n  theme: {\n    spacingStack: {\n      xxs: string;\n    };\n  };\n}\n\nconst DescriptionWrapper = styled.div`\n  ${({ theme }: ThemeInterface) => `\n    margin-bottom: ${theme.spacingStack.xxs};\n  `}\n`;\n\nconst UserList = styled.ul`\n  margin-top: ${({ theme }) => theme.spacingStack.xs};\n  margin-bottom: ${({ theme }) => theme.spacingStack.xs};\n`;\n\ninterface User {\n  id: string;\n  username: string;\n  token: string;\n  avatarURI?: string | null;\n}\n\ninterface LocalUser {\n  ida: string;\n  user: {\n    username: string;\n  };\n  token: string;\n}\n\ntype OnClickCallback = (token: string, id: string, username: string) => void;\n\nconst renderCards = (users: User[], onClick: OnClickCallback) =>\n  users.map(({ username, avatarURI, id, token }) => (\n    <UserCard\n      key={id}\n      id={id}\n      token={token}\n      onClick={onClick}\n      username={username}\n      avatarURI={avatarURI}\n    />\n  ));\n\n/**\n * Component that containts index page\n */\nconst IndexPage = () => {\n  const { appName, appSource } = useContext(AppContext);\n  const navigate = useNavigate();\n  const [users, setUsers] = useState<User[]>([]);\n\n  useEffect(() => {\n    const localUsers = window.localStorage.getItem('ida@users') || '{}';\n    const parsedLocalUsers = JSON.parse(localUsers).users || [];\n\n    if (parsedLocalUsers.length < 1) {\n      navigate('/signin');\n      return;\n    }\n\n    setUsers(\n      parsedLocalUsers.map(({ ida, token, user }: LocalUser) => ({\n        id: ida,\n        token,\n        username: user.username,\n        avatarURI: null,\n      }))\n    );\n  }, []);\n\n  const handleClick = (token: string, id: string, username: string): void => {\n    basicSignin({ username, token, ida: id, appSource });\n  };\n\n  return (\n    <Main>\n      <SEO title=\"Authentication\" />\n      <Header>\n        <Brand />\n      </Header>\n      <DescriptionWrapper>\n        <SmallText>{`Entre no ${appName} através IDa!`}</SmallText>\n      </DescriptionWrapper>\n      <Subtitle type=\"h3\">Escolha uma conta para continuar</Subtitle>\n      <UserList>{renderCards(users, handleClick)}</UserList>\n      <ButtonText\n        white\n        small\n        onClick={() => {\n          navigate('/signin/auth/');\n        }}\n      >\n        Entrar com outra conta\n      </ButtonText>\n    </Main>\n  );\n};\n\nexport default IndexPage;\n","import axios from 'axios';\n\ninterface SigninData {\n  username: string;\n  password: string;\n}\n\n/**\n * function to request login on IDA api\n * @param {object} data user information to be send with the request\n * @param {string} data.username user username\n * @param {string} data.password user password\n * @returns {Pomise} request response\n */\nexport const signin = ({ username, password }: SigninData) => {\n  return axios.post(\n    `${process.env.API_URI}/login`,\n    { username, password },\n    {\n      headers: {\n        'Access-Control-Allow-Origin': '*',\n        'Content-Type': 'application/json',\n      },\n    }\n  );\n};\n\ninterface SignupData {\n  username: string;\n  password: string;\n}\n\n/**\n * function to request user register on IDA api\n * @param {object} data user information to be send with the request\n * @param {string} data.username user username\n * @param {string} data.password user password\n * @returns {Pomise} request response\n */\nexport const signup = ({ username, password }: SignupData) => {\n  return axios.post(`${process.env.API_URI}/signup`, {\n    username,\n    password,\n  });\n};\n\n/**\n * function to request user verication by token on IDA api\n * @param {string} token user token to be send with the request\n * @returns {Pomise} request response\n */\nexport const verifyToken = (token: string) =>\n  axios.post(\n    `${process.env.API_URI}/validate-token`,\n    { token },\n    {\n      headers: {\n        'Access-Control-Allow-Origin': '*',\n        'Content-Type': 'application/json',\n      },\n    }\n  );\n\nexport const requestResetPassword = async (input: string) => {\n  return axios.post(`${process.env.API_URI}/request-reset-password`, {\n    input,\n  });\n};\n\nexport const validateResetPasswordToken = async (token: string) => {\n  return axios.post(`${process.env.API_URI}/validate-reset-password-token`, {\n    token,\n  });\n};\n\n/**\n * function to send the IDA account verication by email on IDA api\n * @param {string} ida user ida repesents the identity of the user\n * @param {string} email user email to be send the validation\n * @returns {Pomise} request response\n */\nexport const sendEmailValidation = async (\n  ida: string,\n  email: string\n): Promise<any> => {\n  return axios.post(`${process.env.API_URI}/send-email-validation`, {\n    ida,\n    email,\n  });\n};\n\n/**\n * function to validate the IDA account verication by email on IDA api\n * @param {string} ida user ida repesents the identity of the user\n * @param {string} token user token to be validated\n * @returns {Pomise} request response\n */\nexport const sendEmailValidationToken = async (\n  ida: string,\n  token: string\n): Promise<any> => {\n  return axios.post(`${process.env.API_URI}/validate-email-token`, {\n    ida,\n    token,\n  });\n};\n\n/**\n * function to send IDA account verication code by phone on IDA api\n * @param {string} ida user ida repesents the identity of the user\n * @param {string} phone user to be send the code\n * @returns {Pomise} request response\n */\nexport const sendPhoneValidation = async (\n  ida: string,\n  phone: string\n): Promise<any> => {\n  return axios.post(`${process.env.API_URI}/phone-generate-code`, {\n    ida,\n    phone,\n  });\n};\n\n/**\n * function to validate IDA account verication code by phone on IDA api\n * @param {string} ida user ida repesents the identity of the user\n * @param {string} code use code to be validated\n * @returns {Pomise} request response\n */\nexport const sendPhoneValidationCode = async (\n  ida: string,\n  code: string\n): Promise<any> => {\n  return axios.post(`${process.env.API_URI}/phone-validate-code`, {\n    ida,\n    code,\n  });\n};\n"],"sourceRoot":""}