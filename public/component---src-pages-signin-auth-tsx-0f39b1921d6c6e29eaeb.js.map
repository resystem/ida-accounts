{"version":3,"sources":["webpack:///./src/utils/ida-error.util.ts","webpack:///./src/utils/localStorage.util.ts","webpack:///./src/controllers/user.controller.ts","webpack:///./src/utils/validations.ts","webpack:///./src/pages/signin/auth.tsx","webpack:///./src/repositories/user.repository.ts"],"names":["status","types","saveUserOnLocalStorage","ida","token","user","window","localStorage","setItem","localUsers","getItem","parsedLocalUsers","JSON","parse","users","index","findIndex","userFounded","data","splice","push","stringify","signin","a","username","password","setErrors","setLoading","appSource","signinRepository","signinResponse","response","error","console","log","phone","email","stringifiedData","postMessage","basicSignin","verifyTokenRepository","navigate","state","sendResetPasswordEmail","setEmailError","test","requestResetPassword","sendResetPasswordSMS","setValidPhone","inputWithoutChars","replace","isValidPhone","Header","styled","header","theme","spacingStack","xxs","Wrapper","div","Content","Space","xs","SmallSpace","Form","form","xxxs","Footer","footer","Auth","location","useContext","AppContext","appName","useState","setUsername","setPassword","errors","useEffect","title","type","autoComplete","onSubmit","e","preventDefault","value","onChange","label","white","small","onClick","disabled","axios","post","process","headers","signup","verifyToken","input","sendEmailValidation","sendEmailValidationToken","sendPhoneValidation","sendPhoneValidationCode","code"],"mappings":"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","file":"component---src-pages-signin-auth-tsx-0f39b1921d6c6e29eaeb.js","sourcesContent":["export const status: { [key: string]: string } = {\n  'user/wrong-password': 'Senha incorreta',\n  'user/not-found': 'Usuário não encontrado',\n};\n\nexport const types = {\n  WRONG_PASSWORD: 'user/wrong-password',\n  USER_NOT_FOUND: 'user/not-found',\n};\n","interface UserLocalStorage {\n  ida: string;\n  token: string;\n}\n\ninterface UserParams extends UserLocalStorage {\n  user: {\n    username: string;\n  };\n}\n\nfunction saveUserOnLocalStorage({ ida, token, user }: UserParams): void {\n  window.localStorage.setItem('ida@id', ida);\n  window.localStorage.setItem('ida@token', token);\n\n  const localUsers = window.localStorage.getItem('ida@users') || '{}';\n  const parsedLocalUsers = JSON.parse(localUsers).users || [];\n  const index = parsedLocalUsers.findIndex(\n    (userFounded: UserLocalStorage) => userFounded.ida === ida\n  );\n  const data = { ida, token, user };\n\n  if (index !== -1) {\n    parsedLocalUsers.splice(index, 1, data);\n  } else {\n    parsedLocalUsers.push(data);\n  }\n\n  window.localStorage.setItem(\n    'ida@users',\n    JSON.stringify({ users: parsedLocalUsers })\n  );\n}\n\nexport { saveUserOnLocalStorage };\n\nexport default null;\n","import { navigate } from '@reach/router';\nimport { isEmail, isPhone } from '../utils/validations';\nimport {\n  signin as signinRepository,\n  signup as signupRepository,\n  verifyToken as verifyTokenRepository,\n  requestResetPassword,\n  sendEmailValidation as sendEmailValidationRepository,\n  sendEmailValidationToken as sendEmailValidationTokenRepository,\n  sendPhoneValidation as sendPhoneValidationRepository,\n  sendPhoneValidationCode as sendPhoneValidationCodeRepository,\n} from '../repositories/user.repository';\nimport { status, types } from '../utils/ida-error.util';\nimport { saveUserOnLocalStorage } from '../utils/localStorage.util';\n\ninterface Errors {\n  username?: string;\n  password?: string;\n}\n\ninterface UserLogin {\n  username: string;\n  password: string;\n}\ninterface SigninParams extends UserLogin {\n  appSource: any;\n  setErrors(error: Errors): void;\n  setLoading(status: boolean): void;\n}\n\ninterface UserLocalStorage {\n  ida: string;\n  token: string;\n}\n\n/**\n * function to valdiate and request authentication to the repository\n * @param {object} data user information to validate and authenticate\n * @param {string} data.username user username\n * @param {string} data.password user password\n * @param {string} data.setErrors function to set errors on story\n * @param {string} data.setLoading function to set loading state on story\n * @param {string} data.appSource parent Window object\n */\nexport const signin = async ({\n  username,\n  password,\n  setErrors,\n  setLoading,\n  appSource,\n}: SigninParams): Promise<void> => {\n  setLoading(true);\n  setErrors({});\n  let signinResponse;\n  try {\n    signinResponse = await signinRepository({ username, password });\n  } catch (err) {\n    if (err.response && err.response.data && err.response.data.error) {\n      const { error } = err.response.data;\n      switch (error) {\n        case types.WRONG_PASSWORD:\n          setErrors({ password: status[error] });\n          return;\n        case types.USER_NOT_FOUND:\n          setErrors({ username: status[error] });\n          return;\n        default:\n          return;\n      }\n    }\n\n    setLoading(false);\n    throw err;\n  }\n\n\n  if (signinResponse.data) {\n    console.log(signinResponse);\n    const {\n      ida, token, username, phone, email,\n    } = signinResponse.data;\n    const stringifiedData = JSON.stringify({\n      username,\n      ida,\n      token,\n      phone,\n      email,\n    });\n\n    saveUserOnLocalStorage({ ida, token, user: { username } });\n\n    if (appSource) appSource.postMessage(stringifiedData, '*');\n  }\n\n  setErrors({});\n  setLoading(false);\n};\n\ninterface BaisSigninParams {\n  ida: string;\n  token: string;\n  username: string;\n  appSource: any;\n}\n\n/**\n * function to request token validaiton on IDA api\n * @param {object} data user information to validate and authenticate\n * @param {string} data.token user username\n * @param {string} data.token user token\n * @param {string} data.ida user ida\n * @param {string} data.appSource parent Window object\n */\nexport const basicSignin = async ({\n  username,\n  ida,\n  token,\n  appSource,\n}: BaisSigninParams) => {\n  let response;\n\n  try {\n    response = await verifyTokenRepository(token);\n  } catch (err) {\n    navigate('/signin/auth', { state: { username } });\n    throw err;\n  }\n\n  const { email, phone } = response.data;\n  const stringifiedData = JSON.stringify({\n    ida,\n    token,\n    username,\n    email,\n    phone,\n  });\n\n\n  console.log('has app source?', !!appSource);\n  if (appSource) appSource.postMessage(stringifiedData, '*');\n};\n\ninterface SendResetPasswordEmailParams {\n  email: string;\n  setEmailError(error: string): void;\n}\n\n/**\n * function to send email password reset\n * @param {object} data user information to send email password reset\n * @param {string} data.email email\n *\n */\nexport const sendResetPasswordEmail = async ({\n  email,\n  setEmailError,\n}: SendResetPasswordEmailParams) => {\n  const isValidEmail = isEmail(email);\n  if (!isValidEmail) {\n    setEmailError('Informe um e-mail válido');\n    return;\n  }\n  setEmailError('');\n  try {\n    await requestResetPassword(email);\n  } catch (err) {\n    console.log(err);\n    throw err;\n  }\n  navigate('/forget-password/sent-email', { state: { email } });\n};\n\ninterface SendResetPasswordSMSParams {\n  phone: string;\n  setValidPhone(isValid: boolean): void;\n}\n\nexport const sendResetPasswordSMS = async ({\n  phone,\n  setValidPhone,\n}: SendResetPasswordSMSParams) => {\n  const isValidPhone = isPhone(phone);\n  if (!phone) {\n    setValidPhone(isValidPhone);\n    return;\n  }\n  setValidPhone(isValidPhone);\n  try {\n    await requestResetPassword(phone);\n  } catch (err) {\n    throw err;\n  }\n};\n","export const phoneMask = (input: string) => {\n  let v = input;\n  v = v.replace(/\\D/g, '');\n  v = v.length > 11 ? v.substring(0, 11) : v;\n  v = v.replace(/^(\\d\\d)(\\d)/g, '($1) $2');\n  v = v.replace(/(\\d{5})(\\d)/, '$1-$2');\n  return v;\n};\n\nexport const isPhone = (input: string) => {\n  const inputWithoutChars = input.replace(/\\W/g, '');\n  const inputPhoneFormatted = `+55${inputWithoutChars}`;\n  const regexPhone = /^\\+[0-9]{9,}$/;\n  return regexPhone.test(inputPhoneFormatted);\n};\n\nexport const isEmail = (input: string) => {\n  const regexW3C = /^[a-zA-Z0-9.!#$%&'*+/=?^_`{|}~-]+@[a-zA-Z0-9](?:[a-zA-Z0-9-]{0,61}[a-zA-Z0-9])?(?:\\.[a-zA-Z0-9](?:[a-zA-Z0-9-]{0,61}[a-zA-Z0-9])?)*$/;\n  return regexW3C.test(input);\n};\n\nexport const passwordValidation = (input: string) => {\n  const regex = /^(?=.*[0-9])(?=.*[a-zA-Z])[a-zA-Z0-9]{8,}$/;\n  return regex.test(input);\n};\n","import React, { useState, useEffect, useContext } from 'react';\nimport { navigate } from '@reach/router';\nimport styled from 'styled-components';\nimport {\n  ButtonText,\n  SmallText,\n  Subtitle,\n  Button,\n  TextInput,\n} from '@resystem/design-system';\nimport Main from '../../components/main';\nimport SEO from '../../components/seo';\nimport Brand from '../../components/brand/brand';\nimport { AppContext } from '../../store';\nimport { signin } from '../../controllers/user.controller';\n\nconst Header = styled.header`\n  margin-bottom: ${({ theme }) => theme.spacingStack.xxs};\n`;\n\nconst Wrapper = styled.div`\n  display: grid;\n  grid-template-rows: auto 70px;\n  grid-auto-rows: min-content;\n  min-height: 100%;\n`;\n\nconst Content = styled.div``;\n\nconst Space = styled.div`\n  margin-bottom: ${({ theme }) => theme.spacingStack.xs};\n`;\n\nconst SmallSpace = styled.div`\n  margin-bottom: ${({ theme }) => theme.spacingStack.xxs};\n`;\n\nconst Form = styled.form`\n  margin-top: ${({ theme }) => theme.spacingStack.xs};\n  margin-bottom: ${({ theme }) => theme.spacingStack.xs};\n  display: grid;\n  grid-gap: ${({ theme }) => theme.spacingStack.xxxs};\n`;\n\nconst Footer = styled.footer`\n  display: flex;\n  flex-direction: column;\n  justify-content: flex-end;\n  align-items: flex-end;\n`;\n\ninterface Props {\n  location: {\n    state?: {\n      username?: string;\n    };\n  };\n}\n\ninterface ThemeInterface {\n  theme: {\n    spacingStack: {\n      xxs: String;\n    };\n  };\n}\n\ninterface Errors {\n  username?: string;\n  password?: string;\n}\n\ninterface EventInterface {\n  preventDefault(): void;\n}\n\n/**\n * Component that containts signin index page\n */\nconst Auth = ({ location }: Props) => {\n  const { appName, appSource } = useContext(AppContext);\n  const [username, setUsername] = useState<string>('');\n  const [password, setPassword] = useState<string>('');\n  const [loading, setLoading] = useState<boolean>(false);\n  const [errors, setErrors] = useState<Errors>({});\n\n  useEffect(() => {\n    if (location.state && location.state.username) {\n      setUsername(location.state.username);\n      setPassword('');\n    }\n  }, []);\n\n  return (\n    <Main>\n      <SEO title=\"Auth\" />\n      <Wrapper>\n        <Content>\n          <Header>\n            <Brand />\n          </Header>\n          <SmallText>{`Entre no ${appName} através IDa!`}</SmallText>\n          <Space />\n          <Subtitle type=\"h3\">\n            Agora utilizamos a IDa para autenticar seu login\n          </Subtitle>\n          <Form\n            autoComplete=\"off\"\n            onSubmit={(e: EventInterface) => {\n              e.preventDefault();\n              signin({\n                username,\n                password,\n                setErrors,\n                setLoading,\n                appSource,\n              });\n            }}\n          >\n            <TextInput\n              value={username}\n              onChange={setUsername}\n              autoComplete=\"off\"\n              error={errors.username}\n              label=\"Usuário ou e-mail\"\n            />\n            <TextInput\n              type=\"password\"\n              error={errors.password}\n              autoComplete=\"off\"\n              value={password}\n              onChange={setPassword}\n              label=\"Senha\"\n            />\n          </Form>\n        </Content>\n        <Footer>\n          <div>\n            <ButtonText\n              white\n              small\n              onClick={() => {\n                navigate('/forget-password', { replace: true });\n              }}\n            >\n              Esqueceu sua senha?\n            </ButtonText>\n          </div>\n          <SmallSpace />\n          <div>\n            <Button\n              onClick={(e: EventInterface) => {\n                e.preventDefault();\n                console.log('here');\n                signin({\n                  username,\n                  password,\n                  setErrors,\n                  setLoading,\n                  appSource,\n                });\n              }}\n              disabled={!password || !username}\n            >\n              Entrar\n            </Button>\n          </div>\n        </Footer>\n      </Wrapper>\n    </Main>\n  );\n};\n\nexport default Auth;\n","import axios from 'axios';\n\ninterface SigninData {\n  username: string;\n  password: string;\n}\n\n/**\n * function to request login on IDA api\n * @param {object} data user information to be send with the request\n * @param {string} data.username user username\n * @param {string} data.password user password\n * @returns {Pomise} request response\n */\nexport const signin = ({ username, password }: SigninData) => {\n  return axios.post(\n    `${process.env.API_URI}/login`,\n    { username, password },\n    {\n      headers: {\n        'Access-Control-Allow-Origin': '*',\n        'Content-Type': 'application/json',\n      },\n    }\n  );\n};\n\ninterface SignupData {\n  username: string;\n  password: string;\n}\n\n/**\n * function to request user register on IDA api\n * @param {object} data user information to be send with the request\n * @param {string} data.username user username\n * @param {string} data.password user password\n * @returns {Pomise} request response\n */\nexport const signup = ({ username, password }: SignupData) => {\n  return axios.post(`${process.env.API_URI}/signup`, {\n    username,\n    password,\n  });\n};\n\n/**\n * function to request user verication by token on IDA api\n * @param {string} token user token to be send with the request\n * @returns {Pomise} request response\n */\nexport const verifyToken = (token: string) =>\n  axios.post(\n    `${process.env.API_URI}/validate-token`,\n    { token },\n    {\n      headers: {\n        'Access-Control-Allow-Origin': '*',\n        'Content-Type': 'application/json',\n      },\n    }\n  );\n\nexport const requestResetPassword = async (input: string) => {\n  return axios.post(`${process.env.API_URI}/request-reset-password`, {\n    input,\n  });\n};\n\nexport const validateResetPasswordToken = async (token: string) => {\n  return axios.post(`${process.env.API_URI}/validate-reset-password-token`, {\n    token,\n  });\n};\n\n/**\n * function to send the IDA account verication by email on IDA api\n * @param {string} ida user ida repesents the identity of the user\n * @param {string} email user email to be send the validation\n * @returns {Pomise} request response\n */\nexport const sendEmailValidation = async (\n  ida: string,\n  email: string\n): Promise<any> => {\n  return axios.post(`${process.env.API_URI}/send-email-validation`, {\n    ida,\n    email,\n  });\n};\n\n/**\n * function to validate the IDA account verication by email on IDA api\n * @param {string} ida user ida repesents the identity of the user\n * @param {string} token user token to be validated\n * @returns {Pomise} request response\n */\nexport const sendEmailValidationToken = async (\n  ida: string,\n  token: string\n): Promise<any> => {\n  return axios.post(`${process.env.API_URI}/validate-email-token`, {\n    ida,\n    token,\n  });\n};\n\n/**\n * function to send IDA account verication code by phone on IDA api\n * @param {string} ida user ida repesents the identity of the user\n * @param {string} phone user to be send the code\n * @returns {Pomise} request response\n */\nexport const sendPhoneValidation = async (\n  ida: string,\n  phone: string\n): Promise<any> => {\n  return axios.post(`${process.env.API_URI}/phone-generate-code`, {\n    ida,\n    phone,\n  });\n};\n\n/**\n * function to validate IDA account verication code by phone on IDA api\n * @param {string} ida user ida repesents the identity of the user\n * @param {string} code use code to be validated\n * @returns {Pomise} request response\n */\nexport const sendPhoneValidationCode = async (\n  ida: string,\n  code: string\n): Promise<any> => {\n  return axios.post(`${process.env.API_URI}/phone-validate-code`, {\n    ida,\n    code,\n  });\n};\n"],"sourceRoot":""}