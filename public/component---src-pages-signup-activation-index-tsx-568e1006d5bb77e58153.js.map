{"version":3,"sources":["webpack:///./src/pages/signup/activation/index.tsx","webpack:///./src/components/signin-components/styles.tsx","webpack:///./src/repositories/user.repository.ts","webpack:///./src/controllers/user.registry.controller.ts"],"names":["ButtonWrapper","styled","div","SuccessValidation","appName","type","disabled","onClick","FailValidation","errorMessage","Activation","useState","setAppName","location","useLocation","wasValidated","setWasValidated","validationMessage","setValidationMessage","useEffect","query","newToken","token","search","queryString","parse","ida","getIda","sendEmailValidationToken","then","response","console","log","data","error","title","CheckboxWrapper","Content","theme","spacingStack","xs","ButtonContainer","Footer","footer","Header","header","IconWrapper","IconContainer","LindDecoration","a","brandColor","secondary","medium","Paragraph","p","Space","SpaceXXS","xxxs","SpaceXXXS","Wrapper","signin","username","password","axios","post","process","API_URI","headers","signup","verifyToken","requestResetPassword","input","sendEmailValidation","email","sendPhoneValidation","phone","sendPhoneValidationCode","code","signupRepository","promise","sendEmailValidationRepository","send","sendEmailValidationTokenRepository","sendPhoneValidationRepository","sendPhoneValidationCodeRepository"],"mappings":"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","file":"component---src-pages-signup-activation-index-tsx-568e1006d5bb77e58153.js","sourcesContent":["import React, { useState, useEffect } from 'react';\nimport styled from 'styled-components';\nimport { useLocation } from '@reach/router';\nimport queryString from 'query-string';\n\nimport { Subtitle, Button, Text } from '@resystem/design-system';\nimport Main from '../../../components/main';\nimport SEO from '../../../components/seo';\nimport Brand from '../../../components/brand/brand';\n\nimport { Content, Header, Wrapper, Space } from '../../../components/signin-components/styles';\n\nimport { sendEmailValidationToken } from '../../../controllers/user.registry.controller';\n\nconst ButtonWrapper = styled.div`\n  width: 100%;\n\n  & button {\n    width: 100%;\n  }\n`;\n\ninterface ParsedQuery<T = string> {\n  [key: string]: T | T[] | null;\n}\n\ninterface ISuccessValidation {\n  appName: string;\n}\n\ninterface IFailValidation {\n  appName: string;\n  errorMessage: string;\n}\n\nconst SuccessValidation = ({ appName }: ISuccessValidation) => {\n  return (\n    <>\n      <Subtitle type=\"h3\">Seu cadastro foi confirmado</Subtitle>\n      <Space />\n      <Text>\n        Você pode entrar no portal da IDa a qualquer momento para conhecer\n        outras iniciativas\n      </Text>\n      <Space />\n      <ButtonWrapper>\n        <Button disabled={false} onClick={() => {}}>\n          Continuar para {`${appName}`}\n        </Button>\n      </ButtonWrapper>\n    </>\n  );\n};\n\nconst FailValidation = ({ appName, errorMessage }: IFailValidation) => {\n  return (\n    <>\n      <Subtitle type=\"h3\">Seu cadastro não foi confirmado</Subtitle>\n      <Space />\n      <Text>\n        Você pode entrar no portal da IDa a qualquer momento para conhecer\n        outras iniciativas\n      </Text>\n      <Space />\n      <Text>{errorMessage}</Text>\n      <Space />\n      <ButtonWrapper>\n        <Button disabled={false} onClick={() => {}}>\n          Continuar para {`${appName}`}\n        </Button>\n      </ButtonWrapper>\n    </>\n  );\n};\n\nconst Activation: React.FC = () => {\n  const [appName, setAppName] = useState<string>('');\n  const location = useLocation();\n  const [wasValidated, setWasValidated] = useState<boolean>(false);\n  const [validationMessage, setValidationMessage] = useState<string>('');\n\n  function getToken(query: any): string {\n    const newToken: ParsedQuery = queryString.parse(query);\n    return newToken.token ? `${newToken.token}` : '';\n  }\n\n  function getIda(query: any): string {\n    const newToken: ParsedQuery = queryString.parse(query);\n    return newToken.ida ? `${newToken.ida}` : '';\n  }\n\n  useEffect(() => {\n    setAppName('SOM');\n    const token = getToken(location.search);\n    const ida = getIda(location.search);\n\n    sendEmailValidationToken(ida, token).then((response) => {\n      console.log('sendEmailValidationToken ', response);\n\n      if (response.data) {\n        setWasValidated(true);\n      } else if (response.error) {\n        setValidationMessage(response.error.error);\n      }\n    });\n  }, [location]);\n\n  return (\n    <Main>\n      <SEO title=\"Activation\" />\n      <Wrapper>\n        <Header>\n          <Brand />\n        </Header>\n        <Content>\n          <Space />\n          {wasValidated && <SuccessValidation appName={appName} />}\n          {!wasValidated && (\n            <FailValidation\n              appName={appName}\n              errorMessage={validationMessage}\n            />\n          )}\n        </Content>\n      </Wrapper>\n      );\n    </Main>\n  );\n};\n\nexport default Activation;\n","import styled from 'styled-components';\n\nexport const CheckboxWrapper = styled.div`\n  display: flex;\n  align-items: center;\n  justify-content: flex-start;\n`;\n\nexport const Content = styled.div`\n  padding-top: ${({ theme }) => theme.spacingStack.xs};\n`;\n\nexport const ButtonContainer = styled.div`\n  width: 100%;\n  button {\n    width: 100%;\n  }\n`;\n\nexport const Footer = styled.footer`\n  display: flex;\n  justify-content: flex-end;\n  align-items: flex-end;\n`;\n\nexport const Header = styled.header`\n  height: 100%;\n  width: 100%;\n`;\n\nexport const IconWrapper = styled.div`\n  display: flex;\n  color: #fff;\n  font-weight: 700;\n  align-items: center;\n  justify-content: center;\n  width: 100px;\n  height: 100%;\n  border: 2px solid #fff;\n  border-radius: 12px;\n  cursor: pointer;\n`;\n\nexport const IconContainer = styled.div`\n  height: 96px;\n  display: flex;\n  justify-content: space-between;\n`;\n\nexport const LindDecoration = styled.a`\n  :link,\n  :visited,\n  :hover,\n  :active {\n    text-decoration: underline;\n    color: ${({ theme }) => theme.brandColor.secondary.medium};\n  }\n`;\n\nexport const Paragraph = styled.p`\n  width: 100%;\n  color: #fff;\n  font-size: 16px;\n  line-height: 18px;\n`;\n\nexport const Space = styled.div`\n  margin-bottom: ${({ theme }) => theme.spacingStack.xs};\n`;\n\nexport const SpaceXXS = styled.div`\n  margin-bottom: ${({ theme }) => theme.spacingStack.xxxs};\n`;\n\nexport const SpaceXXXS = styled.div`\n  margin-bottom: ${({ theme }) => theme.spacingStack.xxxs};\n`;\n\nexport const Wrapper = styled.div`\n  display: grid;\n  grid-template-rows: 70px auto 70px;\n  grid-auto-rows: min-content;\n  min-height: 100%;\n`;\n","import axios from 'axios';\n\ninterface SigninData {\n  username: string;\n  password: string;\n}\n\n/**\n * function to request login on IDA api\n * @param {object} data user information to be send with the request\n * @param {string} data.username user username\n * @param {string} data.password user password\n * @returns {Pomise} request response\n */\nexport const signin = ({ username, password }: SigninData) => {\n  return axios.post(\n    `${process.env.API_URI}/login`,\n    { username, password },\n    {\n      headers: {\n        'Access-Control-Allow-Origin': '*',\n        'Content-Type': 'application/json',\n      },\n    }\n  );\n};\n\ninterface SignupData {\n  username: string;\n  password: string;\n}\n\n/**\n * function to request user register on IDA api\n * @param {object} data user information to be send with the request\n * @param {string} data.username user username\n * @param {string} data.password user password\n * @returns {Pomise} request response\n */\nexport const signup = ({ username, password }: SignupData) => {\n  return axios.post(`${process.env.API_URI}/signup`, {\n    username,\n    password,\n  });\n};\n\n/**\n * function to request user verication by token on IDA api\n * @param {string} token user token to be send with the request\n * @returns {Pomise} request response\n */\nexport const verifyToken = (token: string) =>\n  axios.post(\n    `${process.env.API_URI}/validate-token`,\n    { token },\n    {\n      headers: {\n        'Access-Control-Allow-Origin': '*',\n        'Content-Type': 'application/json',\n      },\n    }\n  );\n\nexport const requestResetPassword = async (input: string) => {\n  return axios.post(`${process.env.API_URI}/request-reset-password`, {\n    input,\n  });\n};\n\nexport const validateResetPasswordToken = async (token: string) => {\n  return axios.post(`${process.env.API_URI}/validate-reset-password-token`, {\n    token,\n  });\n};\n\n/**\n * function to send the IDA account verication by email on IDA api\n * @param {string} ida user ida repesents the identity of the user\n * @param {string} email user email to be send the validation\n * @returns {Pomise} request response\n */\nexport const sendEmailValidation = async (\n  ida: string,\n  email: string\n): Promise<any> => {\n  return axios.post(`${process.env.API_URI}/send-email-validation`, {\n    ida,\n    email,\n  });\n};\n\n/**\n * function to validate the IDA account verication by email on IDA api\n * @param {string} ida user ida repesents the identity of the user\n * @param {string} token user token to be validated\n * @returns {Pomise} request response\n */\nexport const sendEmailValidationToken = async (\n  ida: string,\n  token: string\n): Promise<any> => {\n  return axios.post(`${process.env.API_URI}/validate-email-token`, {\n    ida,\n    token,\n  });\n};\n\n/**\n * function to send IDA account verication code by phone on IDA api\n * @param {string} ida user ida repesents the identity of the user\n * @param {string} phone user to be send the code\n * @returns {Pomise} request response\n */\nexport const sendPhoneValidation = async (\n  ida: string,\n  phone: string\n): Promise<any> => {\n  return axios.post(`${process.env.API_URI}/phone-generate-code`, {\n    ida,\n    phone,\n  });\n};\n\n/**\n * function to validate IDA account verication code by phone on IDA api\n * @param {string} ida user ida repesents the identity of the user\n * @param {string} code use code to be validated\n * @returns {Pomise} request response\n */\nexport const sendPhoneValidationCode = async (\n  ida: string,\n  code: string\n): Promise<any> => {\n  return axios.post(`${process.env.API_URI}/phone-validate-code`, {\n    ida,\n    code,\n  });\n};\n","import {\n  signup as signupRepository,\n  sendEmailValidation as sendEmailValidationRepository,\n  sendEmailValidationToken as sendEmailValidationTokenRepository,\n  sendPhoneValidation as sendPhoneValidationRepository,\n  sendPhoneValidationCode as sendPhoneValidationCodeRepository,\n} from '../repositories/user.repository';\nimport { status, types } from '../utils/ida-error.util';\n\ninterface GenericData<T> {\n  [key: string]: T | boolean | number;\n}\ninterface DataSignUp {\n  ida: string | null;\n  token: string;\n}\ninterface GenericError {\n  [key: string]: string;\n}\n\ntype GenericResponse<T> = {\n  data: GenericData<T> | null | undefined;\n  error: GenericError | null | undefined;\n};\n\nexport const signup = async (\n  username: string,\n  password: string\n): Promise<GenericResponse<string>> => {\n  let promise;\n  const response: GenericResponse<string> = { data: null, error: null };\n  try {\n    promise = await signupRepository({ username, password });\n  } catch (err) {\n    const { error } = err.response.data;\n\n    if (error && error === 'auth/duplicated-user') {\n      response.error = {\n        username: 'Nome de usuário já em uso',\n      };\n    }\n    return response;\n    throw err;\n  }\n\n  const { data } = promise;\n  response.data = {\n    ida: data.data.ida,\n    token: data.data.token,\n  };\n\n  return response;\n};\n\n/**\n * function to send the IDA account verication by email on IDA api\n * @param {string} ida user ida repesents the identity of the user\n * @param {string} email user email to be send the validation\n * @returns {Pomise} request response\n */\nexport const sendEmailValidation = async (\n  ida: string,\n  email: string\n): Promise<GenericResponse<string>> => {\n  let promise;\n  const response: GenericResponse<string> = { data: null, error: null };\n  try {\n    promise = await sendEmailValidationRepository(ida, email);\n  } catch (err) {\n    const { error } = err.response.data;\n\n    if (error && error === 'email/invalid-email') {\n      response.error = {\n        email: 'Email inválido',\n      };\n    } else if (error && error === 'email/invalid-ida') {\n      response.error = {\n        email: 'IDA inválido',\n      };\n    }\n    return response;\n  }\n\n  response.data = { send: true };\n\n  return response;\n};\n\n/**\n * function to validate the IDA account verication by email on IDA api\n * @param {string} ida user ida repesents the identity of the user\n * @param {string} token user token to be validated\n * @returns {Pomise} request response\n */\nexport const sendEmailValidationToken = async (\n  ida: string,\n  phone: string\n): Promise<GenericResponse<string>> => {\n  let promise;\n  const response: GenericResponse<string> = { data: null, error: null };\n  try {\n    promise = await sendEmailValidationTokenRepository(ida, phone);\n  } catch (err) {\n    const { error } = err.response.data;\n\n    if (error && error === 'email/invalid-email') {\n      response.error = {\n        error: 'Email inválido',\n      };\n    } else if (error && error === 'email/invalid-ida') {\n      response.error = {\n        error: 'IDA inválido',\n      };\n    } else if (error && error === 'email/invalid-token') {\n      response.error = {\n        error: 'Token inválido',\n      };\n    } else if (error && error === 'email/expired-token') {\n      response.error = {\n        error: 'Token expirado',\n      };\n    }\n    return response;\n  }\n\n  const { data } = promise;\n  response.data = data;\n\n  return response;\n};\n\n/**\n * function to send IDA account verication code by phone on IDA api\n * @param {string} ida user ida repesents the identity of the user\n * @param {string} phone user to be send the code\n * @returns {Pomise} request response\n */\nexport const sendPhoneValidation = async (\n  ida: string,\n  phone: string\n): Promise<GenericResponse<string>> => {\n  let promise;\n  const response: GenericResponse<string> = { data: null, error: null };\n  try {\n    promise = await sendPhoneValidationRepository(ida, phone);\n  } catch (err) {\n    const { error } = err.response.data;\n\n    if (error && error === 'phone/invalid-number') {\n      response.error = {\n        phone: 'Número inválido',\n      };\n    } else if (error && error === 'phone/invalid-ida') {\n      response.error = {\n        phone: 'IDA inválido',\n      };\n    }\n    return response;\n  }\n\n  const { data } = promise;\n  response.data = {\n    ida: data.data.ida,\n    phone: data.data.phone,\n  };\n\n  return response;\n};\n\n/**\n * function to validate IDA account verication code by phone on IDA api\n * @param {string} ida user ida repesents the identity of the user\n * @param {string} code use code to be validated\n * @returns {Pomise} request response\n */\nexport const sendPhoneValidationCode = async (\n  ida: string,\n  code: string\n): Promise<GenericResponse<string>> => {\n  let promise;\n  const response: GenericResponse<string> = { data: null, error: null };\n  try {\n    promise = await sendPhoneValidationCodeRepository(ida, code);\n  } catch (err) {\n    const { error } = err.response.data;\n\n    if (error && error === 'phone/invalid-number') {\n      response.error = {\n        code: 'Número inválido',\n      };\n    } else if (error && error === 'phone/invalid-ida') {\n      response.error = {\n        code: 'IDA inválido',\n      };\n    } else if (error && error === 'phone/invalid-code') {\n      response.error = {\n        code: 'Código inválido',\n      };\n    }\n    return response;\n  }\n\n  const { data } = promise;\n  response.data = {\n    ida: data.data.ida,\n    phone: data.data.phone,\n  };\n  return response;\n};\n"],"sourceRoot":""}